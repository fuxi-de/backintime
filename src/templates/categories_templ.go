// Code generated by templ - DO NOT EDIT.

// templ: version: 0.2.476
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "fuxifuchs/backintime/src/templates/components"

func spotifyWebplayer() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_spotifyWebplayer_0fe9`,
		Function: `function __templ_spotifyWebplayer_0fe9(){console.log('initting spotify player')
  const token = localStorage.getItem("backInTime-token")
  console.log(token)
  window.onSpotifyWebPlaybackSDKReady = () => {
        console.log('onSpotifyWebPlaybackSDKReady')
        const player = new window.Spotify.Player({
            name: 'Web Playback SDK',
            getOAuthToken: cb => { cb(token); },
        });
        player.addListener('ready', ({ device_id }) => {
            console.log('Ready with Device ID', device_id);
            window.backintime = {} 
            window.backintime.device_id = device_id
        });

        player.addListener('not_ready', ({ device_id }) => {
            console.log('Device ID has gone offline', device_id);
        });
        
        player.addListener('player_state_changed', ( state => {

          if (!state) {
            return;
          }

          player.getCurrentState().then( state => { 
             if (!state) {
                console.error('User is not playing music through the Web Playback SDK');
                return;
             }

             var current_track = state.track_window.current_track;
             var next_track = state.track_window.next_tracks[0];

             console.log('Currently Playing', current_track);
             console.log('Playing Next', next_track); 
          });

        }));


        player.connect();

    };}`,
		Call:       templ.SafeScript(`__templ_spotifyWebplayer_0fe9`),
		CallInline: templ.SafeScriptInline(`__templ_spotifyWebplayer_0fe9`),
	}
}

func Categories() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = spotifyWebplayer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<section class=\"flex gap-8\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Card("Test", "Subheadline", "37i9dQZF1E4m433mhB66fa").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Card("Second", "Subheadline", "37i9dQZF1DX3N4mXY2MuSz?si=b169647349084729").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</section><script async src=\"https://sdk.scdn.co/spotify-player.js\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := ``
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
